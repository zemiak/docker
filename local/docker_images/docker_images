#!/bin/sh
set -e

### BEGIN INIT INFO
# Provides:           docker_images
# Required-Start:     $syslog $remote_fs docker
# Required-Stop:      $syslog $remote_fs
# Should-Start:       
# Should-Stop:        
# Default-Start:      2 3 4 5
# Default-Stop:       0 1 6
# Short-Description:  Create lightweight, portable, self-sufficient containers.
# Description:
#     Starts default system docker images
### END INIT INFO

export PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin

BASE=$(basename $0)

# modify these in /etc/default/$BASE (/etc/default/docker)
DOCKER=/usr/bin/docker
# This is the pid file managed by docker itself
DOCKER_PIDFILE=/var/run/docker.pid
# This is the pid file created/managed by start-stop-daemon
DOCKER_SSD_PIDFILE=/var/run/docker-ssd.pid
DOCKER_LOGFILE=/var/log/docker.log
DOCKER_OPTS=
DOCKER_DESC="Docker Standard Images"

# Get lsb functions
. /lib/lsb/init-functions

if [ -f /etc/default/$BASE ]; then
        . /etc/default/$BASE
fi

# see also init_is_upstart in /lib/lsb/init-functions (which isn't available in Ubuntu 12.04, or we'd use it)
if [ -x /sbin/initctl ] && /sbin/initctl version 2>/dev/null | grep -q upstart; then
        log_failure_msg "$DOCKER_DESC is managed via upstart, try using service $BASE $1"
        exit 1
fi

# Check docker is present
if [ ! -x $DOCKER ]; then
        log_failure_msg "$DOCKER not present or not executable"
        exit 1
fi

fail_unless_root() {
        if [ "$(id -u)" != '0' ]; then
                log_failure_msg "$DOCKER_DESC must be run as root"
                exit 1
        fi
}

start_images() {
	"$DOCKER" start books
	"$DOCKER" start jenkins
	"$DOCKER" start movies
        "$DOCKER" start podcasts
        "$DOCKER" start shared_folders
	"$DOCKER" start proxy
}

stop_images() {
        "$DOCKER" stop proxy
        "$DOCKER" stop shared_folders
	"$DOCKER" stop podcasts
	"$DOCKER" stop movies
	"$DOCKER" stop jenkins
	"$DOCKER" stop books
}

docker_status() {
        CONTAINER=$1
	"$DOCKER" top $CONTAINER >/dev/null 2>/dev/null
	if [ $? -ne 0 ]
	then
	        echo "$CONTAINER is not running"
		return 1
	fi
}

status_of_images() {
	docker_status books || return 1
	docker_status jenkins || return 1
	docker_status movies || return 1
	docker_status podcasts || return 1
	docker_status shared_folders || return 1
	docker_status proxy || return 1
	return 0
}

case "$1" in
        start)
                fail_unless_root
                status_of_proc -p "$DOCKER_SSD_PIDFILE" "$DOCKER" "$DOCKER_DESC" >/dev/null

                if [ "$?" -ne "0" ]; then
                	log_failure_msg "$DOCKER is not running"
                	exit 1
                fi

                ulimit -n 1048576
                if [ "$BASH" ]; then
                        ulimit -u 1048576
                else
                        ulimit -p 1048576
                fi

                log_begin_msg "Starting $DOCKER_DESC: $BASE"
                sleep 10s
                start_images
                log_end_msg $?
                ;;

        stop)
                fail_unless_root
                log_begin_msg "Stopping $DOCKER_DESC: $BASE"
                stop_images
                log_end_msg $?
                ;;

        restart)
                fail_unless_root
                docker_pid=`cat "$DOCKER_SSD_PIDFILE" 2>/dev/null`
                [ -n "$docker_pid" ] \
                        && ps -p $docker_pid > /dev/null 2>&1 \
                        && $0 stop
                $0 start
                ;;

        force-reload)
                fail_unless_root
                $0 restart
                ;;

        status)
                status_of_images && log_success_msg "$DOCKER_DESC is running" || log_failure_msg "$DOCKER_DESC is not running"
                ;;

        *)
                echo "Usage: $0 {start|stop|restart|status}"
                exit 1
                ;;
esac
